name: Windows - RustDesk

on:
  workflow_dispatch:

jobs:
  build:
    name: Start Building...
    runs-on: windows-latest
    timeout-minutes: 360  # Установка таймаута на 6 часов

    steps:
      - name: Downloading & Installing Essentials
        run: |
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/qdyd4p9t6xoabl95n5o3g/Downloads.bat?rlkey=snr74vv1vr8k5suujugvrhjtm&dl=1" -OutFile "Downloads.bat"
          cmd /c Downloads.bat

      - name: Log In To AnyDesk
        run: cmd /c show.bat

      - name: Setup and Start Services
        run: |
          # Установка nssm если еще не установлен
          if (-Not (Test-Path "C:\nssm\win64\nssm.exe")) {
              Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "nssm.zip"
              Expand-Archive -Path "nssm.zip" -DestinationPath "C:\nssm"
          }
          
          # Установка Chrome как службы
          C:\nssm\win64\nssm.exe install ChromeService "C:\Program Files\Google\Chrome\Application\chrome.exe" "--no-sandbox"
          Start-Service -Name ChromeService

          # Установка RustDesk как службы
          C:\nssm\win64\nssm.exe install RustDeskService "C:\Path\To\rustdesk.exe"
          Start-Service -Name RustDeskService

      - name: Prevent Termination of Critical Processes
        run: |
          # Создание PowerShell скрипта для дополнительного мониторинга
          $monitorScript = @"
          $logPath = "C:\ProcessMonitor.log"
          
          function Log-Message {
              param ([string]\$message)
              \$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              "\$timestamp - \$message" | Out-File -FilePath \$logPath -Append
          }

          function Send-EmailNotification {
              param ([string]\$subject, [string]\$body)
              Send-MailMessage -From "monitor@example.com" -To "admin@example.com" -Subject \$subject -Body \$body -SmtpServer "smtp.example.com"
          }

          while (\$true) {
              try {
                  Start-Sleep -Seconds 20
                  \$processes = @("chrome", "rustdesk")
                  foreach (\$proc in \$processes) {
                      if (-not (Get-Process -Name \$proc -ErrorAction SilentlyContinue)) {
                          Start-Process "\$proc.exe" -WindowStyle Hidden
                          Log-Message "\$proc.exe был обнаружен как завершённый и перезапущен."
                          Send-EmailNotification "\$proc перезапущен" "\$proc.exe был автоматически перезапущен."
                      }
                  }
              }
              catch {
                  Log-Message "Ошибка в мониторинге процессов: $_"
              }
          }
          "@
          # Сохранение скрипта в файл
          $monitorScript | Out-File -FilePath "C:\MonitorProcesses.ps1" -Encoding UTF8

          # Настройка задачи в Планировщике задач для запуска мониторингового скрипта при старте системы
          schtasks.exe /Create /SC ONSTART /TN "ProcessMonitor" /TR "powershell.exe -NoProfile -ExecutionPolicy Bypass -File C:\MonitorProcesses.ps1" /RL HIGHEST /F

      - name: Time Counter
        run: python time.py
